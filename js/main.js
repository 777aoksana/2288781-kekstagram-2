/* eslint-disable no-console */
// КОНСТАНТЫ
/** количество загруженных фотографий
 * photo: устанавливаем количество загружаемых фотографий
 */
const MAX_PHOTOS = 25;

/** количество лайков
 * likes, число — количество лайков, где случайное число от 15 до 200
*/
const LIKES = {
  MIN: 15,
  MAX: 200,
};

/** количество комментариев
 * все комментарии генерируются случайным образом
 * comments - количество комментариев к каждой фотографии — случайное число от 0 до 30
 */
const COMMENTS = {
  MIN: 0,
  MAX: 30,
};

/** количество аватарок
 * аватарки подготовлены в директории img
 * поле avatar — это строка, значение которой формируется по правилу: img/avatar-{{случайное число от 1 до 6}}.svg
*/
const AVATARS = {
  MIN: 1,
  MAX: 6,
};


// МАССИВЫ
/** массив из 25 сгенерированных объектов
 * создаем массив из 25 сгенерированных объектов, где каждый объект массива — описание фотографии
 *
 * description - строка — самостоятельное описание фотографии
*/
const DESCRIPTIONS = [
  'Море — это не просто бескрайние просторы воды, это целый мир эмоций, отдыха и вдохновения',
  'Тропа к морю',
  'Море, море, мир бездонный, Пенный шелест волн прибрежных, Над тобой встают, как зори, Над тобой встают, как зори, Нашей юности надежды.',
  'Женское сердце подобно морю: оно глубоко, бурно',
  'Люди обычно ели грубые овощи, и даже чашка белого риса была редкой радостью',
  'Цвет автомобиля может быть любым, при условии, что он чёрный',
  'Когда дошла очередь до блюда с клубникой, тетенька расфилософствовалась',
  'Спасибо, родина. Всех ягод лучше — красная смородина…',
  'Самолет летит над синим морем к красивому лазурному коралловому берегу среди белых облаков',
  'Обувь меняет язык вашего тела. Она возвышает вас как физически, так и эмоционально',
  'Жизнь человека напоминает отпечатки следов на песчаном морском берегу, где набегающие волны — годы, и чем их больше — тем следы становятся всё незаметней',
  'Автомобиль — не роскошь, а средство передвижения',
  'Скажи мне, что ты ешь, и я скажу тебе, кто ты',
  'Кошки — существа загадочные, как легенды и сказания',
  'Тепла Вашим ножкам',
  'Лететь выше облаков',
  'Отдельный скрипач сам управляет собой, оркестр нуждается в дирижёре',
  'Что самое главное в красной машине? Феррари!',
  'Кто первый встал, того и тапки',
  'Будь щедрым, как пальма. А если не можешь, то будь Стволом кипариса, прямым и простым — благородным',
  'Салат — это то неповторимое блюдо, в котором с особой полнотой проявляются всё искусное умение хозяйки и её фантазия',
  'Каждый закат приносит обещание нового рассвета',
  'Как морской краб всегда плывёт против течения, так и остроумие всегда против мудрости',
  'Впрочем, наша героиня и не подозревала, сколь красочное шоу она невольно затеяла',
  'У него два рога',
];

/** массив объектов — список комментариев
 * отсюда берем рандомно текст комментария и используем
 *
 * для формирования текста комментария — message — вам необходимо взять одно или два случайных предложения из представленных ниже
 */
const MESSAGES = [
  'Всё отлично!',
  'В целом всё неплохо. Но не всё.',
  'Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.',
  'Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.',
  'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
  'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!'
];

/** имя комментатора
 * поле name - составляем случайный набор имён комментаторов
 */
const NAMES = [
  'Александр',
  'Вера',
  'Надежда',
  'Любовь',
  'Роман',
  'Светлана',
  'Максим',
  'Оксана',
  'Игорь',
  'Сергей',
  'Дмитрий',
  'Николай',
  'Константин',
  'Татьяна',
  'Галина',
  'Ольга',
  'Виктория',
  'Павел',
  'Юлия',
  'Валентина',
  'Анастасия',
  'Алексей',
  'Антон',
  'Владимир',
  'Елена'
];


// ФУНКЦИИ
/**
 * Функция для генерации случайного числа в диапозоне от а до b
 * @param {int} a - нижняя граница диапазона,
 * @param {int} b - верхняя граница диапазона,
 * @returns {int} result - возвращает случайное число в диапазоне от a до b,
 */
const getRandomInteger = (a, b) => {
  const lower = Math.ceil(Math.min(a, b)); // округляет в большую сторону
  const upper = Math.floor(Math.max(a, b)); // округляет в меньшую сторону
  const result = Math.random() * (upper - lower + 1) + lower;
  return Math.floor(result);
};

/** Функция для генерации случайного элемента массива
 * @param {int} element - сам массив
 * @param {string} result - элемент массива - element
 */
const getRandomElements = (elements) => elements[getRandomInteger(0, elements.length - 1)];

/** Функция для генерации идентификатора - id
 * идентификаторы не должны повторяться
 * id - это число от 1 до 25
 * @param {int} result - число — идентификатор опубликованной фотографии
 */
const getIdGenerator = () => {
  let firstGenerateId = 0;
  return function () {
    firstGenerateId += 1;
    return firstGenerateId;
  };
};

/** Функция присвоения индентификатора - id
 * для фотографии
 * для URL - адрес будет отличаться только числом
 * для комментариев
*/
const generatePhotoId = getIdGenerator();
const generatePhotoUrl = getIdGenerator();
const generateCommentsId = getIdGenerator();

/** Функция для создания комментария к фото
  * @param {int} id - идентификатор комментария
  * @param {string} avatar - это строка, где значение которой формируется по правилу: img/avatar-{{случайное число от 1 до 6}}.svg
  * @param {string} message - сам комментарий
  * @param {string} name - имя комментатора
  * @param {Array} return arrayComments[] - возвращает массив комментариев
  *
*/
const generateCommentsPhoto = () => {
  const arrayComments = [];
  for (let i = 0; i < getRandomInteger(COMMENTS.MIN, COMMENTS.MAX); i++) {
    arrayComments.push({
      id: generateCommentsId(),
      avatar: `img/avatar-${getRandomInteger(AVATARS.MIN, AVATARS.MAX)}.svg`,
      message: getRandomElements(MESSAGES),
      name: getRandomElements(NAMES),
    });
  }
  return arrayComments;
};

/** Функция для создания объекта с описанием фотографии
  * @param {int} id - идентификатор фотографии
  * @param {string} url - ссылка на фотографию
  * @param {string} description - описание фотографии
  * @param {int} likes - количество лайков
  * @param {Array} generateCommentsToPhoto() - массив комментариев
 * Структура каждого объекта должна быть следующей:
   - id, число — идентификатор опубликованной фотографии. Это число от 1 до 25. Идентификаторы не должны повторяться.
   - url, строка — адрес картинки вида photos/{{i}}.jpg, где {{i}} — это число от 1 до 25. Адреса картинок не должны повторяться.
   - description, строка — описание фотографии. Описание придумайте самостоятельно.
   - comments, массив объектов — список комментариев, оставленных другими пользователями к этой фотографии. Количество комментариев к каждой фотографии — случайное число от 0 до 30. Все комментарии генерируются случайным образом. Пример описания объекта с комментарием:
*/
const getPhotoUsers = () => ({
  id: generatePhotoId(),
  url: `photos/${generatePhotoUrl()}.jpg`,
  description: getRandomElements(DESCRIPTIONS),
  likes: getRandomInteger(LIKES.MIN, LIKES.MAX),
  comments: generateCommentsPhoto(),
});

/** Функция для создания массива объектов длиной PHOTOS с описанием фотографий
*/
const getAllPhotoUsers = () => Array.from({ length: MAX_PHOTOS }, getPhotoUsers);

console.log(getAllPhotoUsers());
